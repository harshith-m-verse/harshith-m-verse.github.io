{"version":3,"file":"utility-lazyrenderer.6d907645.bundle.js","mappings":"wPAsBO,SAAyBA,GAC9B,OAAO,SAAUC,GACf,OACE,wBAACC,EAAD,KACE,wBAACF,EAAqBC,M,kCA1B9B,eACA,YAEO,SAASC,EAAaD,GAC3B,MAAgCE,EAAAA,QAAMC,UAAS,GAA/C,qBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAASJ,EAAAA,QAAMK,SAMrB,OAJA,IAAAC,iBAAgBF,GAAQ,WACtBD,GAAY,MAIZ,wBAAC,UAAMI,SAAP,KACIL,EAGAJ,EAAMU,SAFN,wBAACC,EAAD,CAAgBC,IAAKN,EAAQO,MAAOb,EAAMa,SAkB3C,IAAMF,EAAiBT,EAAAA,QAAMY,YAAW,SAASd,EAAOY,GAC7D,IAAIG,EAAuB,GAI3B,YAHmBC,IAAhBhB,EAAMa,QACPE,EAAoB,GAASf,EAAMa,OAGnC,6CAAKI,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SAAWP,IAAKA,GAASG,O","sources":["webpack://1at06cs097/./utility/lazyRenderer.js"],"sourcesContent":["import React from \"react\";\nimport { useIntersection } from \"./intersectionObserverHook\";\n\nexport function LazyRenderer(props) {\n  const [isInView, setIsInView] = React.useState(false);\n  const divRef = React.useRef();\n\n  useIntersection(divRef, () => {\n    setIsInView(true);\n  });\n\n  return (\n    <React.Fragment>\n      {!isInView ? (\n        <EmptyComponent ref={divRef} divId={props.divId}/>\n      ) : (\n        props.children\n      )}\n    </React.Fragment>\n  );\n}\n\nexport function LazyRendererHOC(WrappedComponent) {\n  return function (props) {\n    return (\n      <LazyRenderer>\n        <WrappedComponent {...props} />\n      </LazyRenderer>\n    );\n  };\n}\n\nexport const EmptyComponent = React.forwardRef(function(props, ref){\n  let additionalAttributes = {};\n  if(props.divId !== undefined){\n    additionalAttributes[\"id\"] = props.divId;\n  }\n  return (\n    <div style={{ width: \"100%\", height: \"250px\" }} ref={ref} {...additionalAttributes}></div>\n  );\n})"],"names":["WrappedComponent","props","LazyRenderer","React","useState","isInView","setIsInView","divRef","useRef","useIntersection","Fragment","children","EmptyComponent","ref","divId","forwardRef","additionalAttributes","undefined","style","width","height"],"sourceRoot":""}